/**
 * Scraper
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIScrapeApiRequest.h"

namespace OpenAPI {

OAIScrapeApiRequest::OAIScrapeApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIScrapeApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIScrapeApiRequest::~OAIScrapeApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIScrapeApiRequest::~OAIScrapeApiRequest()";
}

QMap<QString, QString>
OAIScrapeApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIScrapeApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIScrapeApiRequest::getRawSocket(){
    return socket;
}


void OAIScrapeApiRequest::scrapeRequest(){
    qDebug() << "/scraper/api/scrape";
    connect(this, &OAIScrapeApiRequest::scrape, handler.data(), &OAIScrapeApiHandler::scrape);

    
    QString filename;
    if(socket->queryString().keys().contains("filename")){
        fromStringValue(socket->queryString().value("filename"), filename);
    }
    
    QString md5;
    if(socket->queryString().keys().contains("md5")){
        fromStringValue(socket->queryString().value("md5"), md5);
    }
    


    emit scrape(filename, md5);
}



void OAIScrapeApiRequest::scrapeResponse(const OAIImagesResult& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIScrapeApiRequest::scrapeError(const OAIImagesResult& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIScrapeApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIScrapeApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
