/**
 * Scraper
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImagesResult_images.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImagesResult_images::OAIImagesResult_images(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImagesResult_images::OAIImagesResult_images() {
    this->initializeModel();
}

OAIImagesResult_images::~OAIImagesResult_images() {}

void OAIImagesResult_images::initializeModel() {

    m_r_long_isSet = false;
    m_r_long_isValid = false;

    m_tall_isSet = false;
    m_tall_isValid = false;

    m_hero_isSet = false;
    m_hero_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;
}

void OAIImagesResult_images::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImagesResult_images::fromJsonObject(QJsonObject json) {

    m_r_long_isValid = ::OpenAPI::fromJsonValue(r_long, json[QString("long")]);
    m_r_long_isSet = !json[QString("long")].isNull() && m_r_long_isValid;

    m_tall_isValid = ::OpenAPI::fromJsonValue(tall, json[QString("tall")]);
    m_tall_isSet = !json[QString("tall")].isNull() && m_tall_isValid;

    m_hero_isValid = ::OpenAPI::fromJsonValue(hero, json[QString("hero")]);
    m_hero_isSet = !json[QString("hero")].isNull() && m_hero_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;
}

QString OAIImagesResult_images::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImagesResult_images::asJsonObject() const {
    QJsonObject obj;
    if (m_r_long_isSet) {
        obj.insert(QString("long"), ::OpenAPI::toJsonValue(r_long));
    }
    if (m_tall_isSet) {
        obj.insert(QString("tall"), ::OpenAPI::toJsonValue(tall));
    }
    if (m_hero_isSet) {
        obj.insert(QString("hero"), ::OpenAPI::toJsonValue(hero));
    }
    if (m_logo_isSet) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(logo));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(icon));
    }
    return obj;
}

QString OAIImagesResult_images::getRLong() const {
    return r_long;
}
void OAIImagesResult_images::setRLong(const QString &r_long) {
    this->r_long = r_long;
    this->m_r_long_isSet = true;
}

bool OAIImagesResult_images::is_r_long_Set() const{
    return m_r_long_isSet;
}

bool OAIImagesResult_images::is_r_long_Valid() const{
    return m_r_long_isValid;
}

QString OAIImagesResult_images::getTall() const {
    return tall;
}
void OAIImagesResult_images::setTall(const QString &tall) {
    this->tall = tall;
    this->m_tall_isSet = true;
}

bool OAIImagesResult_images::is_tall_Set() const{
    return m_tall_isSet;
}

bool OAIImagesResult_images::is_tall_Valid() const{
    return m_tall_isValid;
}

QString OAIImagesResult_images::getHero() const {
    return hero;
}
void OAIImagesResult_images::setHero(const QString &hero) {
    this->hero = hero;
    this->m_hero_isSet = true;
}

bool OAIImagesResult_images::is_hero_Set() const{
    return m_hero_isSet;
}

bool OAIImagesResult_images::is_hero_Valid() const{
    return m_hero_isValid;
}

QString OAIImagesResult_images::getLogo() const {
    return logo;
}
void OAIImagesResult_images::setLogo(const QString &logo) {
    this->logo = logo;
    this->m_logo_isSet = true;
}

bool OAIImagesResult_images::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAIImagesResult_images::is_logo_Valid() const{
    return m_logo_isValid;
}

QString OAIImagesResult_images::getIcon() const {
    return icon;
}
void OAIImagesResult_images::setIcon(const QString &icon) {
    this->icon = icon;
    this->m_icon_isSet = true;
}

bool OAIImagesResult_images::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIImagesResult_images::is_icon_Valid() const{
    return m_icon_isValid;
}

bool OAIImagesResult_images::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tall_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hero_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImagesResult_images::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
